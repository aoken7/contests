{
    "contest": {
        "prefix": "contest",
        "scope": "cpp",
        "body": [
            "#include<bits/stdc++.h>",
            "#define all(a) a.begin(), a.end()",
            "#define put(i) cout<<i<<endl",
            "#define rep(i,s,n) for(long long i=s;i<(long long)(n);i++)",
            "using namespace std;",
            "using ll = long long;",
            "",
            "int main(){",
            "    ",
            "}"
        ]
    },
    "putl": {
        "prefix": "putl",
        "scope": "cpp",
        "body": [
            "template <typename T>",
            "void putl(T t) {",
            "    for (auto x : t) cout << x << \" \";",
            "    cout << endl;",
            "}"
        ]
    },
    "megru_search": {
        "prefix": "megru_search",
        "scope": "cpp",
        "body": [
            "int megru_search() {",
            "    ll ok = 0;        //最小値求めるときは ok = MAX",
            "    ll ng = 1e9 + 7;  //                   ng = -1",
            "    while (abs(ok - ng) > 1) {",
            "        ll mid = (ok + ng) / 2;",
            "        if (solve(mid)) {",
            "            ok = mid;",
            "        } else {",
            "            ng = mid;",
            "        }",
            "    }",
            "    return ok;",
            "}"
        ]
    },
    "loop2": {
        "prefix": "loop2",
        "scope": "cpp",
        "body": [
            "    for (ll j = 0; j < n; j++){}"
        ]
    },
    "loop": {
        "prefix": "loop",
        "scope": "cpp",
        "body": [
            "    for (ll i = 0; i < n; i++){}"
        ]
    },
    "unionfind": {
        "prefix": "unionfind",
        "scope": "cpp",
        "body": [
            "struct UnionFind {",
            "    vector<int> r;",
            " ",
            "    UnionFind(int N) {",
            "        r = vector<int>(N+1, -1);",
            "    }",
            " ",
            "    int root(int x) {",
            "        if (r[x] < 0) return x;",
            "        return r[x] = root(r[x]);",
            "    }",
            " ",
            "    bool unite(int x, int y) {",
            "        x = root(x);",
            "        y = root(y);",
            "        if (x == y) return false;",
            "        if (r[x] > r[y]) swap(x, y);",
            "        r[x] += r[y];",
            "        r[y] = x;",
            "        return true;",
            "    }",
            " ",
            "    int size(int x) {",
            "        return -r[root(x)];",
            "    }",
            "};"
        ]
    }
}