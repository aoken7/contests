{
<<<<<<< HEAD
    "contest": {
        "prefix": "contest",
        "scope": "cpp",
        "body": [
            "#include<bits/stdc++.h>",
            "#define all(a) a.begin(), a.end()",
            "#define put(i) cout<<i<<endl",
            "#define rep(i,s,n) for(long long i=s;i<(long long)(n);i++)",
            "using namespace std;",
            "using ll = long long;",
            "",
            "int main(){",
            "    ",
            "}"
        ]
    },
    "putl": {
        "prefix": "putl",
        "scope": "cpp",
        "body": [
            "template <typename T>",
            "void putl(T t) {",
            "    for (auto x : t) cout << x << \" \";",
            "    cout << endl;",
=======
    "matrix_compression": {
        "prefix": "matrix_compression",
        "scope": "cpp",
        "body": [
            "vector<string> compression(vector<string> s) {",
            "    ll w = s[0].size();",
            "    ll h = s.size();",
            "    map<ll, ll> unrow, uncol;",
            "    ll left, right, top, bottom;",
            "    left = bottom = 1e9;",
            "    right = top = -1;",
            "    rep(y, 0, h) {",
            "        rep(x, 0, w) {",
            "            if (s[y][x] == '#') {",
            "                bottom = min(y, bottom);",
            "                top = max(y, top);",
            "                left = min(x, left);",
            "                right = max(x, right);",
            "            }",
            "        }",
            "    }",
            "",
            "    for (ll x = 0; x < left; x++) uncol[x]++;",
            "    for (ll x = right + 1; x < w; x++) uncol[x]++;",
            "    for (ll y = 0; y < bottom; y++) unrow[y]++;",
            "    for (ll y = top + 1; y < h; y++) unrow[y]++;",
            "",
            "    //\"#\"を含まない行を削除した行列の作成",
            "    //削除した行の分だけ高さが減るのでh-unrow.size()",
            "    vector<string> t(h - unrow.size());",
            "    ll y_cnt = 0;",
            "    rep(y, 0, h) {",
            "        if (unrow.count(y)) continue;",
            "        rep(x, 0, w) {",
            "            if (uncol.count(x)) continue;",
            "            t[y_cnt].push_back(s[y][x]);",
            "        }",
            "        y_cnt++;",
            "    }",
            "    return t;",
>>>>>>> 1be9abb3baee6e001289e3bc0a0cb533dc7ffe1e
            "}"
        ]
    },
    "megru_search": {
        "prefix": "megru_search",
        "scope": "cpp",
        "body": [
            "int megru_search() {",
            "    ll ok = 0;        //最小値求めるときは ok = MAX",
            "    ll ng = 1e9 + 7;  //                   ng = -1",
            "    while (abs(ok - ng) > 1) {",
            "        ll mid = (ok + ng) / 2;",
            "        if (solve(mid)) {",
            "            ok = mid;",
            "        } else {",
            "            ng = mid;",
            "        }",
            "    }",
            "    return ok;",
            "}"
        ]
    },
<<<<<<< HEAD
    "loop2": {
        "prefix": "loop2",
        "scope": "cpp",
        "body": [
            "    for (ll j = 0; j < n; j++){}"
=======
    "putl": {
        "prefix": "putl",
        "scope": "cpp",
        "body": [
            "template <typename T>",
            "void putl(T t) {",
            "    for (auto x : t) cout << x << \" \";",
            "    cout << endl;",
            "}"
>>>>>>> 1be9abb3baee6e001289e3bc0a0cb533dc7ffe1e
        ]
    },
    "loop": {
        "prefix": "loop",
        "scope": "cpp",
        "body": [
<<<<<<< HEAD
            "    for (ll i = 0; i < n; i++){}"
=======
            "for (ll i = 0; i < n; i++)"
>>>>>>> 1be9abb3baee6e001289e3bc0a0cb533dc7ffe1e
        ]
    },
    "unionfind": {
        "prefix": "unionfind",
        "scope": "cpp",
        "body": [
            "struct UnionFind {",
            "    vector<int> r;",
<<<<<<< HEAD
            " ",
            "    UnionFind(int N) {",
            "        r = vector<int>(N+1, -1);",
            "    }",
            " ",
=======
            "",
            "    UnionFind(int N) { r = vector<int>(N + 1, -1); }",
            "",
>>>>>>> 1be9abb3baee6e001289e3bc0a0cb533dc7ffe1e
            "    int root(int x) {",
            "        if (r[x] < 0) return x;",
            "        return r[x] = root(r[x]);",
            "    }",
<<<<<<< HEAD
            " ",
=======
            "",
>>>>>>> 1be9abb3baee6e001289e3bc0a0cb533dc7ffe1e
            "    bool unite(int x, int y) {",
            "        x = root(x);",
            "        y = root(y);",
            "        if (x == y) return false;",
            "        if (r[x] > r[y]) swap(x, y);",
            "        r[x] += r[y];",
            "        r[y] = x;",
            "        return true;",
            "    }",
<<<<<<< HEAD
            " ",
            "    int size(int x) {",
            "        return -r[root(x)];",
            "    }",
            "};"
        ]
=======
            "",
            "    int size(int x) { return -r[root(x)]; }",
            "};"
        ]
    },
    "matrix_rotation": {
        "prefix": "matrix_rotation",
        "scope": "cpp",
        "body": [
            "vector<string> rotation(vector<string> s) {",
            "    ll w = s[0].size();",
            "    ll h = s.size();",
            "    vector<string> t(s[0].size());",
            "    rep(y, 0, w) {",
            "        rep(x, 0, h) { t[y].push_back(s[h - 1 - x][y]); }",
            "    }",
            "    return t;",
            "}"
        ]
    },
    "loop2": {
        "prefix": "loop2",
        "scope": "cpp",
        "body": [
            "for (ll j = 0; j < n; j++)"
        ]
    },
    "contest": {
        "prefix": "contest",
        "scope": "cpp",
        "body": [
            "#include<bits/stdc++.h>",
            "#define all(a) a.begin(), a.end()",
            "#define put(i) cout<<i<<endl",
            "#define rep(i,s,n) for(long long i=s;i<(long long)(n);i++)",
            "using namespace std;",
            "using ll = long long;",
            "",
            "int main(){",
            "    ",
            "}"
        ]
>>>>>>> 1be9abb3baee6e001289e3bc0a0cb533dc7ffe1e
    }
}